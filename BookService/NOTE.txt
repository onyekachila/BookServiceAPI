Eager Loading

With eager loading, EF loads related entities as part of the initial database query. 
To perform eager loading, use the System.Data.Entity.Include extension method.

Lazy Loading
With lazy loading, EF automatically loads a related entity when the navigation 
property for that entity is dereferenced. To enable lazy loading, make the navigation property virtual. 
For example, in the Book class: 
when we do this

// Virtual navigation property
    public virtual Author Author { get; set; }
	Now consider the following code:
	var books = db.Books.ToList();  // Does not load authors
	var author = books[0].Author;   // Loads the author for books[0]

	When lazy loading is enabled, accessing the Author property on books[0] causes EF to query the database for the author.

	One way to avoid serialization problems is to serialize data transfer objects 
	(DTOs) instead of entity objects. 

One more thing we need to do is this to get navigational properties back to book from authors

public class Author
{
    public int AuthorId { get; set; }
    [Required]
    public string Name { get; set; }

    public ICollection<Book> Books { get; set; }
}

Unfortunately, this creates a problem when you serialize the models. If you load the related data, it creates a circular object graph.

This problem can be solved using DTO

Right now, our web API exposes the database entities to the client. The client receives data that maps directly 
to your database tables. However, that's not always a good idea. Sometimes you want to change the shape of the data 
that you send to client. For example, you might want to:

Hide particular properties that clients are not supposed to view.
Omit some properties in order to reduce payload size.
Flatten object graphs that contain nested objects, to make them more convenient for clients.
Avoid "over-posting" vulnerabilities. 
Decouple your service layer from your database layer.

To accomplish this, you can define a data transfer object (DTO). 
A DTO is an object that defines how the data will be sent over the network.

he BookDetailDTO class includes all of the properties from the Book model, 
except that AuthorName is a string that will hold the author name. The BookDTO class contains a 
subset of properties from BookDetailDTO.

Next, replace the two GET methods in the BooksController class, 
with versions that return DTOs. We'll use the LINQ Select statement to convert from Book entities into DTOs.

The Knockout library uses the Model-View-ViewModel (MVVM) pattern:

The model is the server-side representation of the data in the business domain (in our case, books and authors).

The view is the presentation layer (HTML).

The view model is a JavaScript object that holds the models. The view model is a 
code abstraction of the UI. It has no knowledge of the HTML representation. Instead, 
it represents abstract features of the view, such as "a list of books".